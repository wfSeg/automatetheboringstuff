#! python3

# phone and email scraper
import re, pyperclip, pprint

# Create regex for phone numbers
phoneRegex = re.compile(r'''
# many types of phone #'s 
# 415-555-0000, 555-0000, (415) 555-000, 555-000 ext 12345

(((\d\d\d)|(\(\d\d\d\)))?	# area code (optional). ? regex means 0 or 1, can colloquially memorize it as the 'optional' regex
(\s|-)						# first seperator
(\d\d\d)					# first 3 digits
-							# seperator
(\d\d\d\d)					# last 4 digits
(((ext(\.)?\s)|x)			# extension word part (optional)
 (\d{2,5}))?)				# extension number part (optional)
''', re.VERBOSE)
# Create a regex for email addresses
emailRegex = re.compile(r'''
#some.+_thing@(something).com

[a-zA-Z0-9_.+]+		# name part, don't have to escape the symbols when it's in a regex 'class'
@					# @ symbol
[a-zA-Z0-9_.+]+		# domain name part

''', re.VERBOSE)
# Get text off the clipboard
text = pyperclip.paste()

# Extract email/phone numbers from this text
extractedPhone = phoneRegex.findall(text) 	# findall returns a list of tuples, change phoneRegex to have everything in one giant group
extractedEmail = emailRegex.findall(text)	
# still getting empty tuples, need loop to remove it
allPhoneNumbers = [] # start an empty list
for phoneNumber in extractedPhone:
	allPhoneNumbers.append(phoneNumber[0])

	''' to explain this, what phoneNumber[0] does it it takes only 1st string in the tuple generated by findall()
	findall will create a list ['408-123-4567', '408', '123', '4567' ], and you only want the first tuple
	with the full phone #. Also, in the phoneRegex, have to enclose the whole regex in () to make it one group,
	otherwise, findall() will return only the first match (area code)
	'''
# TODO: Copy the extracted email/phone to the clipboard... export?
results = '\n'.join(allPhoneNumbers) +'\n' + '\n'.join(extractedEmail)
# instead of a bunch of strings in several lists, join all phone numbers and emails into one string
# each entry seperated by a newline

print('test')
#pprint.pprint(extractedPhone)
print(allPhoneNumbers)
print(extractedEmail)
print(results)

pyperclip.copy(results)

'''oh ok, now I see what pyperclip is used for in this course. I thought why use it when you can 
just copy and paste ctrl+c ctrl+v. It's more for the program itself to copy paste data and scrape.'''